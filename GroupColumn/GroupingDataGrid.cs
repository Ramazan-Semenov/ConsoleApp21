using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Markup;

namespace GroupColumn
{
    [ContentProperty(nameof(GroupingDataGrid.DataGrid))]
    [ContentWrapper(typeof(DataGrid))]
    public class GroupingDataGrid : Control
    {
        public GroupDefinitionCollection GroupDefinitions
        {
            get => (GroupDefinitionCollection)GetValue(GroupDefinitionsProperty);
            set => SetValue(GroupDefinitionsProperty, value);
        }

        public static readonly DependencyProperty GroupDefinitionsProperty = DependencyProperty.Register(
          "GroupDefinitions",
          typeof(GroupDefinitionCollection),
          typeof(GroupingDataGrid),
          new PropertyMetadata(default));

        public DataGrid DataGrid
        {
            get { return (DataGrid)GetValue(DataGridProperty); }
            set { SetValue(DataGridProperty, value); }
        }

        public static readonly DependencyProperty DataGridProperty = DependencyProperty.Register(
          "DataGrid",
          typeof(DataGrid),
          typeof(GroupingDataGrid),
          new PropertyMetadata(default(DataGrid), OnDataGridChanged));

        static GroupingDataGrid()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(GroupingDataGrid), new FrameworkPropertyMetadata(typeof(GroupingDataGrid)));
        }
        private static void OnDataGridChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
          => (d as GroupingDataGrid).OnDataGridChanged(e.OldValue as DataGrid, e.NewValue as DataGrid);

        private bool IsDataGridLayoutDirty { get; set; }
        private Grid GroupHost { get; }
        private Dictionary<Thumb, GroupingDataGridHeader> ThumbToGroupingDataGridHeaderTable { get; }
        private Dictionary<GroupDefinition, GroupingDataGridHeader> GroupDefinitionToGroupingDataGridHeaderTable { get; }

        public GroupingDataGrid()
        {
            this.GroupDefinitions = new GroupDefinitionCollection();
            this.ThumbToGroupingDataGridHeaderTable = new Dictionary<Thumb, GroupingDataGridHeader>();
            this.GroupDefinitionToGroupingDataGridHeaderTable = new Dictionary<GroupDefinition, GroupingDataGridHeader>();
            this.GroupHost = new Grid();
            this.GroupHost.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
            this.GroupHost.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
        }

        public override void OnApplyTemplate()
        {
            base.OnApplyTemplate();
            var contentHost = GetTemplateChild("PART_DataGridHost") as ContentPresenter;
            if (contentHost != null)
            {
                contentHost.Content = this.GroupHost;
            }
        }

        protected virtual void OnDataGridChanged(DataGrid oldDataGrid, DataGrid newDataGrid)
        {
            if (oldDataGrid != null)
            {
                this.GroupHost.Children.Remove(oldDataGrid);
                oldDataGrid.ColumnDisplayIndexChanged -= OnColumnOrderChanged;
                oldDataGrid.AutoGeneratedColumns -= OnDataGridAutoGeneratedColumns;
            }

            if (newDataGrid == null)
            {
                return;
            }

            this.IsDataGridLayoutDirty = true;
            this.GroupHost.Children.Add(this.DataGrid);
            newDataGrid.ColumnDisplayIndexChanged += OnColumnOrderChanged;
            if (newDataGrid.AutoGenerateColumns && !newDataGrid.IsLoaded)
            {
                newDataGrid.AutoGeneratedColumns += OnDataGridAutoGeneratedColumns;
            }
            else
            {
                CreateVisualTree();
            }
        }

        private void OnColumnOrderChanged(object sender, DataGridColumnEventArgs e)
          => CreateVisualTree();

        private void OnDataGridAutoGeneratedColumns(object sender, EventArgs e)
          => CreateVisualTree();

        private void CreateVisualTree()
        {
            CreateGroups();
            if (this.IsDataGridLayoutDirty)
            {
                LayoutDataGrid();
            }
        }

        private void CreateGroups()
        {
            this.ThumbToGroupingDataGridHeaderTable.Clear();
            this.GroupDefinitionToGroupingDataGridHeaderTable.Clear();
            ClearGroupHost();

            AddRowHeaderColumnGroup();

            List<DataGridColumn> sortedColumns = this.DataGrid.Columns
            .OrderBy(column => column.DisplayIndex)
            .ToList();
            int ungroupedColumnCount = sortedColumns.Count - this.GroupDefinitions.Sum(definition => definition.ColumnSpan);
            bool hasUngroupedColumns = ungroupedColumnCount > 0;

            for (int groupIndex = 0; groupIndex < this.GroupDefinitions.Count; groupIndex++)
            {
                GroupDefinition group = this.GroupDefinitions[groupIndex];
                int groupHeaderColumnIndex = groupIndex + 1;

                AddGridColumn();
                AddGroupHeader(group, groupHeaderColumnIndex, sortedColumns);
                if (groupHeaderColumnIndex > 1)
                {
                    GroupDefinition previousGroup = this.GroupDefinitions[groupIndex - 1];
                    AddColumnGrippers(previousGroup, groupHeaderColumnIndex - 1);
                }
            }

            if (hasUngroupedColumns)
            {
                AddGroupForRemainingColumns();
            }
        }

        private void AddGroupForRemainingColumns()
        {
            AddGridColumn(false);
            AddGroupHeader(null, this.GroupHost.ColumnDefinitions.Count - 1, new List<DataGridColumn>());

            if (this.GroupDefinitions.Any())
            {
                GroupDefinition previousGroup = this.GroupDefinitions.Last();
                AddColumnGrippers(previousGroup, this.GroupDefinitions.Count);
            }
        }

        private void CreateColumnGroupHeaderBinding(IList<DataGridColumn> sortedColumns, GroupingDataGridHeader groupHeaderHost)
        {
            GroupDefinition group = groupHeaderHost.GroupDefinition;
            var groupHeaderWidthMultiBinding = new MultiBinding
            {
                Mode = BindingMode.TwoWay,
                Converter = new DataGridColumnRangeWidthToGroupHeaderWidthConverter(sortedColumns),
                ConverterParameter = group
            };

            for (int columnIndex = group.Column; columnIndex < group.Column + group.ColumnSpan; columnIndex++)
            {
                DataGridColumn column = sortedColumns[columnIndex];
                var widthBinding = new Binding(nameof(DataGridColumn.Width))
                {
                    Mode = BindingMode.TwoWay,
                    Source = column
                };
                groupHeaderWidthMultiBinding.Bindings.Add(widthBinding);
            }

            groupHeaderHost.SetBinding(WidthProperty, groupHeaderWidthMultiBinding);
        }

        private GroupingDataGridHeader AddGroupHeader(GroupDefinition group, int groupHeaderColumnIndex, List<DataGridColumn> sortedColumns)
        {
            var groupHeaderHost = new GroupingDataGridHeader(group);
            Grid.SetColumn(groupHeaderHost, groupHeaderColumnIndex);
            Grid.SetRow(groupHeaderHost, 0);
            this.GroupHost.Children.Add(groupHeaderHost);

            if (group != null)
            {
                this.GroupDefinitionToGroupingDataGridHeaderTable.Add(group, groupHeaderHost);
                if (sortedColumns.Any())
                {
                    CreateColumnGroupHeaderBinding(sortedColumns, groupHeaderHost);
                }
            }

            return groupHeaderHost;
        }

        private void AddGridColumn(bool isAutoWidth = true)
        {
            var gridColumnWidth = isAutoWidth
              ? GridLength.Auto
              : new GridLength(1, GridUnitType.Star);
            var groupHeaderHostColumnDefinition = new ColumnDefinition() { Width = gridColumnWidth };
            this.GroupHost.ColumnDefinitions.Add(groupHeaderHostColumnDefinition);
        }

        private void AddColumnGrippers(GroupDefinition groupDefinition, int groupHeaderColumnIndex)
        {
            GroupingDataGridHeader groupHeaderHost = this.GroupDefinitionToGroupingDataGridHeaderTable[groupDefinition];
            AddColumnGripper(groupHeaderColumnIndex, groupHeaderHost, true);
            AddColumnGripper(groupHeaderColumnIndex + 1, groupHeaderHost);
        }

        private void AddColumnGripper(int columnIndex, GroupingDataGridHeader groupHeader, bool isLeftColumnGripper = false)
        {
            var columnGripper = new Thumb()
            {
                HorizontalAlignment = isLeftColumnGripper
                ? HorizontalAlignment.Right
                : HorizontalAlignment.Left,
            };

            columnGripper.DragDelta += OnGroupHeaderResizing;
            this.ThumbToGroupingDataGridHeaderTable.Add(columnGripper, groupHeader);
            Grid.SetColumn(columnGripper, columnIndex);
            Grid.SetRow(columnGripper, 0);
            this.GroupHost.Children.Add(columnGripper);
        }

        private void LayoutDataGrid()
        {
            Grid.SetColumnSpan(this.DataGrid, this.GroupHost.ColumnDefinitions.Count);
            Grid.SetRow(this.DataGrid, 1);
            this.IsDataGridLayoutDirty = false;
        }

        private void AddRowHeaderColumnGroup()
        {
            AddGridColumn();
            GroupingDataGridHeader rowHeaderGroupHost = AddGroupHeader(null, 0, new List<DataGridColumn>());
            var rowHeaderWidthBinding = new Binding(nameof(DataGrid.RowHeaderActualWidth))
            {
                Source = this.DataGrid
            };

            rowHeaderGroupHost.SetBinding(WidthProperty, rowHeaderWidthBinding);
        }

        private void ClearGroupHost()
        {
            for (int childIndex = this.GroupHost.Children.Count - 1; childIndex >= 0; childIndex--)
            {
                var child = this.GroupHost.Children[childIndex];
                if (child != this.DataGrid)
                {
                    this.GroupHost.Children.Remove(child);
                }
            }
        }

        private void OnGroupHeaderResizing(object sender, DragDeltaEventArgs e)
        {
            var thumb = sender as Thumb;
            if (this.ThumbToGroupingDataGridHeaderTable.TryGetValue(thumb, out GroupingDataGridHeader groupingDataGridHeader))
            {
                groupingDataGridHeader.Width += e.HorizontalChange;
            }
        }
    }
}
